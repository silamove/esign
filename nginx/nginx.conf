user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Basic hardening
  server_tokens off;
  client_max_body_size 25m;
  keepalive_timeout 15s;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  # Security headers
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent"';

  access_log  /var/log/nginx/access.log  main;

  upstream backend_upstream {
    server backend:3001;
    keepalive 32;
  }

  # Redirect HTTP to HTTPS
  server {
    listen 80;
    server_name localhost _;
    return 301 https://$host$request_uri;
  }

  # HTTPS server
  server {
    listen              443 ssl http2;
    server_name         localhost _;

    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout  10m;
    ssl_session_cache    shared:SSL:10m;

    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy no-referrer;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
    add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'none'; object-src 'none'" always;

    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_pass http://backend_upstream;
    }

    location = /healthz {
      return 200 'ok';
    }
  }
}
